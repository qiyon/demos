// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: proto/package2/package2.proto

package package2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PkgTwoClient is the client API for PkgTwo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PkgTwoClient interface {
	// grpc method demo
	Hello(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error)
}

type pkgTwoClient struct {
	cc grpc.ClientConnInterface
}

func NewPkgTwoClient(cc grpc.ClientConnInterface) PkgTwoClient {
	return &pkgTwoClient{cc}
}

func (c *pkgTwoClient) Hello(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error) {
	out := new(Resp)
	err := c.cc.Invoke(ctx, "/demo.app.package2.PkgTwo/Hello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PkgTwoServer is the server API for PkgTwo service.
// All implementations must embed UnimplementedPkgTwoServer
// for forward compatibility
type PkgTwoServer interface {
	// grpc method demo
	Hello(context.Context, *Req) (*Resp, error)
	mustEmbedUnimplementedPkgTwoServer()
}

// UnimplementedPkgTwoServer must be embedded to have forward compatible implementations.
type UnimplementedPkgTwoServer struct {
}

func (UnimplementedPkgTwoServer) Hello(context.Context, *Req) (*Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (UnimplementedPkgTwoServer) mustEmbedUnimplementedPkgTwoServer() {}

// UnsafePkgTwoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PkgTwoServer will
// result in compilation errors.
type UnsafePkgTwoServer interface {
	mustEmbedUnimplementedPkgTwoServer()
}

func RegisterPkgTwoServer(s grpc.ServiceRegistrar, srv PkgTwoServer) {
	s.RegisterService(&PkgTwo_ServiceDesc, srv)
}

func _PkgTwo_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PkgTwoServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.app.package2.PkgTwo/Hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PkgTwoServer).Hello(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

// PkgTwo_ServiceDesc is the grpc.ServiceDesc for PkgTwo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PkgTwo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "demo.app.package2.PkgTwo",
	HandlerType: (*PkgTwoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _PkgTwo_Hello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/package2/package2.proto",
}
